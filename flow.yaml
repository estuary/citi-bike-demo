collections:
  # Station information changes relatively infrequently and is ingested from files.
  demo/citi-bike/station-information:
    schema: schemas.yaml#/$defs/station
    key: [/station_id]
  
  # Station statuses are updated continuously in realtime
  demo/citi-bike/station-status:
    schema: schemas.yaml#/$defs/station_status
    key: [/station_id]

  # Joins the information and status data to provide a useful view of 
  # bike availability with location information
  demo/citi-bike/available-by-station:
    schema: schemas.yaml#/$defs/available_by_station
    key: [/station_id]
    derivation:
      register: 
        initial: {}
        schema:
          type: object
          properties:
            info: {$ref: schemas.yaml#/$defs/station}
            status: {$ref: schemas.yaml#/$defs/station_status}
          reduce: {strategy: merge}
      
      transform: 
        fromStationInfo:
          source:
            name: demo/citi-bike/station-information
          update: 
            lambda: typescript
          publish: 
            lambda: typescript
        fromStationStatus:
          source:
            name: demo/citi-bike/station-status
          update: 
            lambda: typescript
          publish: 
            lambda: typescript
          
endpoints: 
  demoDatabase:
    sqlite:
      path: demo-materialization.db
      table: available_by_station

materializations:
  - source:
      name: demo/citi-bike/available-by-station
    endpoint:
      name: demoDatabase
